const TestRequest = require("../models/Laboratory & Pharmacy/TestRequest");
const TestReport = require("../models/Laboratory & Pharmacy/TestReport");
const Patient = require("../models/UserModels/Patient");
const LabTechnician = require("../models/UserModels/LabTechnician");

const {
  catchAsync,
  handleNoResult,
  handleNotFound,
} = require("../Utils/reusableFunctions");

// ✅ Create a new test request
exports.createTestRequest = catchAsync(async (req, res, next) => {
  const { patientId, doctorId, testType } = req.body;

  const patient = await Patient.findById(patientId);
  handleNotFound(patient, "Patient not found", next);

  const newTestRequest = await TestRequest.create({
    patientId,
    doctorId,
    testType,
    status: "Pending",
  });

  res.status(201).json({
    status: "success",
    message: "Test request created successfully",
    data: { newTestRequest },
  });
});

// ✅ Get all test requests for a specific patient
exports.getTestRequestsByPatient = catchAsync(async (req, res, next) => {
  const { patientId } = req.params;

  const testRequests = await TestRequest.find({ patientId }).populate("doctorId", "fullName");

  handleNoResult(testRequests, "No test requests found for this patient", next);

  res.status(200).json({
    status: "success",
    message: "Test requests retrieved successfully",
    result: testRequests.length,
    data: { testRequests },
  });
});

// ✅ Get all test requests assigned to a specific lab technician
exports.getTestRequestsByLabTechnician = catchAsync(async (req, res, next) => {
  const { labTechnicianId } = req.params;

  const testRequests = await TestRequest.find({ labTechnicianId }).populate("patientId", "fullName");

  handleNoResult(testRequests, "No test requests found for this lab technician", next);

  res.status(200).json({
    status: "success",
    message: "Test requests retrieved successfully",
    result: testRequests.length,
    data: { testRequests },
  });
});

// ✅ Update test request status
exports.updateTestRequestStatus = catchAsync(async (req, res, next) => {
  const { id } = req.params;
  const { status } = req.body;

  const updatedTestRequest = await TestRequest.findByIdAndUpdate(id, { status }, {
    new: true,
    runValidators: true,
  });

  handleNotFound(updatedTestRequest, "Test request not found", next);

  res.status(200).json({
    status: "success",
    message: "Test request status updated successfully",
    data: { updatedTestRequest },
  });
});

// ✅ Create a test report
exports.createTestReport = catchAsync(async (req, res, next) => {
  const { testRequestId, labTechnicianId, results, notes } = req.body;

  const testRequest = await TestRequest.findById(testRequestId);
  handleNotFound(testRequest, "Test request not found", next);

  const newTestReport = await TestReport.create({
    testRequestId,
    labTechnicianId,
    results,
    notes,
  });

  testRequest.status = "Completed";
  await testRequest.save();

  res.status(201).json({
    status: "success",
    message: "Test report created successfully",
    data: { newTestReport },
  });
});

// ✅ Get all test reports for a specific patient
exports.getTestReportsByPatient = catchAsync(async (req, res, next) => {
  const { patientId } = req.params;

  const testReports = await TestReport.find({ patientId }).populate("labTechnicianId", "fullName");

  handleNoResult(testReports, "No test reports found for this patient", next);

  res.status(200).json({
    status: "success",
    message: "Test reports retrieved successfully",
    result: testReports.length,
    data: { testReports },
  });
});

// ✅ Get a single test report by ID
exports.getTestReportById = catchAsync(async (req, res, next) => {
  const { id } = req.params;

  const testReport = await TestReport.findById(id)
    .populate("patientId", "fullName")
    .populate("labTechnicianId", "fullName");

  handleNotFound(testReport, "Test report not found", next);

  res.status(200).json({
    status: "success",
    message: "Test report retrieved successfully",
    data: { testReport },
  });
});


Explanation of Functions
createTestRequest:

Creates a new test request for a patient.
Sets the initial status of the test request to "Pending".
getTestRequestsByPatient:

Retrieves all test requests for a specific patient.
Uses populate to include the doctor's full name in the response.
getTestRequestsByLabTechnician:

Retrieves all test requests assigned to a specific lab technician.
Uses populate to include the patient's full name in the response.
updateTestRequestStatus:

Updates the status of a test request by its ID.
createTestReport:

Creates a new test report for a completed test request.
Updates the status of the test request to "Completed".
getTestReportsByPatient:

Retrieves all test reports for a specific patient.
Uses populate to include the lab technician's full name in the response.
getTestReportById:

Retrieves a single test report by its ID.
Uses populate to include the patient's and lab technician's full names in the response.
Summary
createTestRequest: Creates a new test request for a patient.
getTestRequestsByPatient: Retrieves all test requests for a specific patient.
getTestRequestsByLabTechnician: Retrieves all test requests assigned to a specific lab technician.
updateTestRequestStatus: Updates the status of a test request.
createTestReport: Creates a new test report for a completed test request.
getTestReportsByPatient: Retrieves all test reports for a specific patient.
getTestReportById: Retrieves a single test report by its ID.